#### python modules ####

import glob
import os

#### CONFIG FILE ####
#which datasets are to be aligned to which hosts and viruses are specified in dsets.yaml
#also whether or not to try to merge R1 and R2
configfile: "../../proj-spcfc/SNPs.yml"

#this is of the form { dset1: {host: host1, virus: host2, merge: True}, dset2: {host: host2, virus: virus2, merge: False} }

#make four lists, with each entry in each list corresponding to one desired output file

DATASETS = []
SAMPLES = []
HOSTS = []
VIRUSES = []
#also make dictionary MERGE, with key dataset_sample and value True or False
MERGE = {}

#also make list of samples for each dataset, store in dictionary with dataset name as key
#for pileup input
set_samples = {}

for dataset in config.keys():
	#get files in directory and strip off "_1.fastq.gz"
	samples = [os.path.basename(f)[:-11] for f in glob.glob("../../data/reads/{}/*_1.fastq.gz".format(dataset))]
	samples = samples + [os.path.basename(f)[:-12] for f in glob.glob("../../data/reads/{}/*_R1.fastq.gz".format(dataset))]
	set_samples[dataset] = []
	for sample in samples:
		DATASETS.append(dataset)
		SAMPLES.append(sample)
		HOSTS.append(config[dataset]["host"])
		VIRUSES.append(config[dataset]["virus"])
		MERGE["{}_{}".format(dataset, sample)] = config[dataset]["merge"]
		set_samples[dataset].append(sample)


#### local rules ####
localrules: all, convert

#### target files ####
rule all:
	input: 
		expand("../../out/{dset}/host_juncts/{samp}.{host}.bwa.{virus}-juncts0NM.bam", zip, dset=DATASETS, host=HOSTS, virus=VIRUSES, samp=SAMPLES),
		expand("../../out/{dset}/host_variants/{dset}.{host}.bwa.{virus}-juncts.pileup.filtered.vcf", zip, dset=DATASETS, host=HOSTS, virus=VIRUSES, samp=SAMPLES),
		expand("../../out/{dset}/virus_juncts/{samp}.{virus}.bwa.{host}-juncts0NM.bam", zip, dset=DATASETS, host=HOSTS, virus=VIRUSES, samp=SAMPLES),
		expand("../../out/{dset}/virus_variants/{dset}.{virus}.bwa.{host}-juncts.pileup.filtered.vcf", zip, dset=DATASETS, host=HOSTS, virus=VIRUSES, samp=SAMPLES),


#### convert bam to sam ####
rule convert:
	input:
		"../../out/{dset}/{host_virus}/{name}.bam"
	output:
		sam = "../../out/{dset}/{host_virus}/{name}.sam"
	conda: 
		"../envs/bwa.yml"	
	shell:
		"""
		samtools view -h {input} > {output.sam}
		"""

#### extract junction fragments ####
rule extract_junction_reads_host:
	input:
		allInt = "../../out/{dset}/ints/{samp}.{host}.{virus}.integrations.txt",
		hSing = "../../out/{dset}/host_aligned/{samp}.{host}.bwa.{virus}Mappedreads.sam"
	output:
		hSingJunctSam = temp("../../out/{dset}/host_juncts/{samp}.{host}.bwa.{virus}-juncts.sam"),
		hSingJunctBam = "../../out/{dset}/host_juncts/{samp}.{host}.bwa.{virus}-juncts.bam"
	conda:
		"../envs/bwa.yml"
	shell:
		"""
		perl extract_junctions.pl --sam {input.hSing} --ints {input.allInt} --junctSam {output.hSingJunctSam}
		samtools view -bh {output.hSingJunctSam} | samtools sort - -o {output.hSingJunctBam}
		samtools index {output.hSingJunctBam}
		"""

rule extract_junction_reads_virus:
	input:
		allInt = "../../out/{dset}/ints/{samp}.{host}.{virus}.integrations.txt",
		sing = "../../out/{dset}/virus_aligned/{samp}.{virus}.bwa.sam"
	output:
		singJunctSam = temp("../../out/{dset}/virus_juncts/{samp}.{virus}.bwa.{host}-juncts.sam"),
		singJunctBam = "../../out/{dset}/virus_juncts/{samp}.{virus}.bwa.{host}-juncts.bam"
	conda:
		"../envs/bwa.yml"
	shell:
		"""
		perl extract_junctions.pl --sam {input.sing} --ints {input.allInt} --junctSam {output.singJunctSam}
		samtools view -bh {output.singJunctSam} | samtools sort - -o {output.singJunctBam}
		samtools index {output.singJunctBam}
		"""


#### extract junction fragments with zero edit distance ####
rule extract_junction_reads0_host:
	input:
		allInt = "../../out/{dset}/ints/{samp}.{host}.{virus}.integrations.txt",
		hSing = "../../out/{dset}/host_aligned/{samp}.{host}.bwa.{virus}Mappedreads.sam"
	output:
		hSingJunctSam0 = temp("../../out/{dset}/host_juncts/{samp}.{host}.bwa.{virus}-juncts0NM.sam"),
		hSingJunctBam0 = "../../out/{dset}/host_juncts/{samp}.{host}.bwa.{virus}-juncts0NM.bam"
	conda:
		"../envs/bwa.yml"
	shell:
		"""
		perl extract_junctions_0NM.pl --sam {input.hSing} --ints {input.allInt} --junctSam {output.hSingJunctSam0}
		samtools view -bhS {output.hSingJunctSam0} | samtools sort - -o {output.hSingJunctBam0}
		samtools index {output.hSingJunctBam0}
		"""

rule extract_junction_reads0_virus:
	input:
		allInt = "../../out/{dset}/ints/{samp}.{host}.{virus}.integrations.txt",
		sing = "../../out/{dset}/virus_aligned/{samp}.{virus}.bwa.sam"
	output:
		singJunctSam = temp("../../out/{dset}/virus_juncts/{samp}.{virus}.bwa.{host}-juncts0NM.sam"),
		singJunctBam = "../../out/{dset}/virus_juncts/{samp}.{virus}.bwa.{host}-juncts0NM.bam"
	conda:
		"../envs/bwa.yml"
	shell:
		"""
		perl extract_junctions_0NM.pl --sam {input.sing} --ints {input.allInt} --junctSam {output.singJunctSam}
		samtools view -bh {output.singJunctSam} | samtools sort - -o {output.singJunctBam}
		samtools index {output.singJunctBam}
		"""

#### variant calling ####

def pileup_input_host(wildcards):
	samples = set_samples[wildcards.dset]
	samples = [f"../../out/{wildcards.dset}/host_juncts/{sample}.{wildcards.host}.bwa.{wildcards.virus}-juncts.bam" for sample in samples]
	return samples

rule pileup_host:
	input:
		sams = pileup_input_host
	output:
		pileup = "../../out/{dset}/host_variants/{dset}.{host}.bwa.{virus}-juncts.pileup.vcf",
		vcf = "../../out/{dset}/host_variants/{dset}.{host}.bwa.{virus}-juncts.called.vcf"
	conda:
		"../envs/bcftools.yml"
	params:
		regions = lambda wildcards: "../../data/references/" + config[wildcards.dset]["regions"],
		ref = lambda wildcards: "../../data/references/" + config[wildcards.dset]["host"] + ".fa"
	threads: 5
	shell:
		"""
		bcftools mpileup --annotate FORMAT/AD -f {params.ref} -R {params.regions} {input} > {output.pileup}
		bcftools call -mv  --ploidy 1 -Ov -o {output.vcf} < {output.pileup}
		"""
		
def pileup_input_virus(wildcards):
	samples = set_samples[wildcards.dset]
	samples = [f"../../out/{wildcards.dset}/virus_juncts/{sample}.{wildcards.virus}.bwa.{wildcards.host}-juncts.bam" for sample in samples]
	return samples

rule pileup_virus:
	input:
		sams = pileup_input_virus
	output:
		pileup = "../../out/{dset}/virus_variants/{dset}.{virus}.bwa.{host}-juncts.pileup.vcf",
		vcf = "../../out/{dset}/virus_variants/{dset}.{virus}.bwa.{host}-juncts.called.vcf"
		
	conda:
		"../envs/bcftools.yml"
	params:
		ref = lambda wildcards: "../../data/references/" + config[wildcards.dset]["virus"] + ".fa"
	threads: 5
	shell:
		"""
		bcftools mpileup --annotate FORMAT/AD --max-depth 10000 -f {params.ref} {input} > {output.pileup}
		bcftools call -mv -Ov --ploidy 1 -o {output.vcf} < {output.pileup}
		"""

rule filter:
	input:
		called = "../../out/{dset}/{type}_variants/{name}.called.vcf",
		pileup = "../../out/{dset}/{type}_variants/{name}.pileup.vcf"

	output:
		filtered = "../../out/{dset}/{type}_variants/{name}.pileup.filtered.vcf"
	shell:
		"""
		awk -F  '\t' 'NR==FNR {{id[$2]; next;}} $2 in id' {input.called} {input.pileup} > {output.filtered}
		"""


